### CONTINUE FROM https://github.com/orgs/HowProgrammingWorks/repositories?page=5
https://github.com/HowProgrammingWorks/AbstractFactory [] Abstract Factory Pattern
https://github.com/HowProgrammingWorks/AbstractionLayers [] Abstraction Layers
https://github.com/HowProgrammingWorks/Abstractions [] Programming is abstract thinking
https://github.com/HowProgrammingWorks/ActorModel [] ...
https://github.com/HowProgrammingWorks/Adapter [] Pattern Adapter Implementations
https://github.com/HowProgrammingWorks/Antipatterns [] ...
https://github.com/HowProgrammingWorks/API [] ...
https://github.com/HowProgrammingWorks/Arrays [] ...
https://github.com/HowProgrammingWorks/AsyncAwait [] ...
https://github.com/HowProgrammingWorks/AsynchronousProgramming [] ...
https://github.com/HowProgrammingWorks/AsyncIterator [] ...
https://github.com/HowProgrammingWorks/Atomics [] Atomic Operations API
https://github.com/HowProgrammingWorks/Automata [] Automata-based programming
https://github.com/HowProgrammingWorks/Benchmark [] Performance testing for different techniques
https://github.com/HowProgrammingWorks/Callbacks [] Callbacks, Listeners and Events
https://github.com/HowProgrammingWorks/Cancelable [] Cancelable Asynchronous Abstractions
https://github.com/HowProgrammingWorks/Chaining [] Chaining with classes, ptototypes and functors
https://github.com/HowProgrammingWorks/ChainOfResponsibility [] Pattern: Chain of responsibility
https://github.com/HowProgrammingWorks/Closure [] ...
https://github.com/HowProgrammingWorks/CodeReview [] Code Review Examples
https://github.com/HowProgrammingWorks/Collections [] Different types of Associative Collections
https://github.com/HowProgrammingWorks/Collector [] ...
https://github.com/HowProgrammingWorks/CommandLine [] CLI, Command Line Interface and Console
https://github.com/HowProgrammingWorks/Composition [] ...
https://github.com/HowProgrammingWorks/ConcurrentQueue [] Asynchronous Concurrent Queue with Priority and Factor
https://github.com/HowProgrammingWorks/Contract [] Programming by contract, Design by contract (DbC), Contract-based Programming
https://github.com/HowProgrammingWorks/Controller [] GRASP: Controller principle
https://github.com/HowProgrammingWorks/CouplingCohesion [] GRASP: Low coupling and High cohesion
https://github.com/HowProgrammingWorks/CQRS [] Command-Query Responsibility Segregation
https://github.com/HowProgrammingWorks/Creator [] GRASP: Creator principle
https://github.com/HowProgrammingWorks/DataTypes [] ...
https://github.com/HowProgrammingWorks/DDD [] ...
https://github.com/HowProgrammingWorks/Deadlock [] Deadlock and Livelock Examples
https://github.com/HowProgrammingWorks/Deferred [] Deferred (and comparison to Future and Promise)
https://github.com/HowProgrammingWorks/DependencyInjection [] Resolving dependencies with dependency injection
https://github.com/HowProgrammingWorks/Dictionary [] ...
https://github.com/HowProgrammingWorks/ESNext [] ES.Next Examples
https://github.com/HowProgrammingWorks/EventDrivenProgramming [] Event-driven programming
https://github.com/HowProgrammingWorks/EventEmitter [] Simple EventEmitter with multiple listeners
https://github.com/HowProgrammingWorks/EventSourcing [] Event Sourcing
https://github.com/HowProgrammingWorks/Exams [] Exams readiness test
https://github.com/HowProgrammingWorks/Facade [] Pattern Facade Implementations
https://github.com/HowProgrammingWorks/Factory [] Factory for FP, OOP, other paradigms and metaprogramming
https://github.com/HowProgrammingWorks/FactoryMethod [] Factory method
https://github.com/HowProgrammingWorks/Files [] Files and file system
https://github.com/HowProgrammingWorks/Function [] ...
https://github.com/HowProgrammingWorks/Functor [] Mappable objects
https://github.com/HowProgrammingWorks/Future [] Future as Asynchronous Abstraction
https://github.com/HowProgrammingWorks/Generator [] ...
https://github.com/HowProgrammingWorks/GracefulShutdown [] ...
https://github.com/HowProgrammingWorks/Higher-code [] ...
https://github.com/HowProgrammingWorks/HigherOrderFunction [] Higher-order functions having functions as arguments or result
https://github.com/HowProgrammingWorks/HttpRequest [] HTTP, XMLHttpRequest, fetch
https://github.com/HowProgrammingWorks/Index [] ...
https://github.com/HowProgrammingWorks/InformationHiding [] Information Hiding
https://github.com/HowProgrammingWorks/IntegrationTesting [] Integration testing
https://github.com/HowProgrammingWorks/Interface [] Structure defining class external members names and types
https://github.com/HowProgrammingWorks/InterProcessCommunication [] ...
https://github.com/HowProgrammingWorks/Isolation [] ...
https://github.com/HowProgrammingWorks/Iteration [] ...
https://github.com/HowProgrammingWorks/Iterator [] Iterator and Iterable protocols
https://github.com/HowProgrammingWorks/LinkedList [] Linked list data structure
https://github.com/HowProgrammingWorks/LiskovSubstitution [] The Liskov Substitution Principle
https://github.com/HowProgrammingWorks/LiveQA [] Programming, JavaScript, Node.js, Architecture Seminars
https://github.com/HowProgrammingWorks/LiveTable [] Multiuser spreadsheet example
https://github.com/HowProgrammingWorks/Logging [] Logging in Node.js and JavaScript
https://github.com/HowProgrammingWorks/Lowcode [] ...
https://github.com/HowProgrammingWorks/Map [] Map as Associative Array
https://github.com/HowProgrammingWorks/Memoization [] ...
https://github.com/HowProgrammingWorks/Metaprogramming [] Metaprogramming examples
https://github.com/HowProgrammingWorks/Modularity [] ...
https://github.com/HowProgrammingWorks/Mutex [] ...
https://github.com/HowProgrammingWorks/NodejsStarterKit [] ...
https://github.com/HowProgrammingWorks/NodejsStarterKit [] Starter Kit for Node.js 16 or later, minimum dependencies ðŸš€
https://github.com/HowProgrammingWorks/NodeServer [] ...
https://github.com/HowProgrammingWorks/NonBlocking []
https://github.com/HowProgrammingWorks/ObjectOrientedProgramming [] Object-oriented programming
https://github.com/HowProgrammingWorks/Observer [] Pattern Observer
https://github.com/HowProgrammingWorks/PartialApplication [] ...
https://github.com/HowProgrammingWorks/PathTraversal [] Path Traversal Attack
https://github.com/HowProgrammingWorks/Pool [] Object Pool
https://github.com/HowProgrammingWorks/Promise [] ...
https://github.com/HowProgrammingWorks/PromiseError [] ...
https://github.com/HowProgrammingWorks/Proxy [] Proxy
https://github.com/HowProgrammingWorks/PureFabrication [] GRASP: Pure Fabrication
https://github.com/HowProgrammingWorks/ReactiveProgramming [] Reactive Programming
https://github.com/HowProgrammingWorks/Recursion [] Recursion - define a function using itself
https://github.com/HowProgrammingWorks/Refactoring [] Refactoring â€” changing the code without changing its external behavior
https://github.com/HowProgrammingWorks/Reusable []
https://github.com/HowProgrammingWorks/RevealingConstructor [] Revealing Constructor Pattern
https://github.com/HowProgrammingWorks/Rx [] Reactive Extensions (Rx)
https://github.com/HowProgrammingWorks/Scaffolding [] ...
https://github.com/HowProgrammingWorks/School [] Modern school program
https://github.com/HowProgrammingWorks/Semaphore [] ...
https://github.com/HowProgrammingWorks/Serialization []
https://github.com/HowProgrammingWorks/ServeStatic [] ...
https://github.com/HowProgrammingWorks/Session [] HTTP server with sessions, tokens, cookies
https://github.com/HowProgrammingWorks/SingleResponsibility [] The Single Responsibility Principle
https://github.com/HowProgrammingWorks/Singleton [] ...
https://github.com/HowProgrammingWorks/Socket [] ...
https://github.com/HowProgrammingWorks/SQLInjection [] SQL Injection
https://github.com/HowProgrammingWorks/Streams [] ...
https://github.com/HowProgrammingWorks/String [] String is a Sequence of Characters and Manipulation Methods
https://github.com/HowProgrammingWorks/Struct [] Record, struct or structure
https://github.com/HowProgrammingWorks/Stub [] Stub function, method, object
https://github.com/HowProgrammingWorks/Symbol [] Unique identifier for special object properties
https://github.com/HowProgrammingWorks/Testing [] Â«Why TestingÂ» in examples
https://github.com/HowProgrammingWorks/Thenable [] ...
https://github.com/HowProgrammingWorks/Threads [] Multithreading: WorkerThreads, Workers, SheredWorkers
https://github.com/HowProgrammingWorks/Timers [] ...
https://github.com/HowProgrammingWorks/Tools [] Development tools and environment configuration
https://github.com/HowProgrammingWorks/Unittesting [] Unit Testing
https://github.com/HowProgrammingWorks/WebsocketChat [] ...
https://github.com/HowProgrammingWorks/Workers [] Node.js workers and Web workers